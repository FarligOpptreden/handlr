using System;
using System.Collections.Generic;
using System.Linq;
using Handlr.Framework.Routing.Interfaces;
using Handlr.Framework.Routing.Attributes;
using Handlr.Framework.Routing.Loaders;
using Handlr.Framework.Routing.Types;
using Handlr.Framework.Web.Interfaces;
using Handlr.Framework.Routing.Exceptions;
using System.Xml.XPath;
using Handlr.Framework.UI.Types;
using Handlr.Framework.Web;

namespace Handlr.Framework.Routing.Process
{
    /// <summary>
    /// Represents a REST process that is invoked by an HTTP handler.
    /// </summary>
    [Tag("Definition")]
    public class RestProcess : IProcess<GenericFieldCache, RestProcessLoaderArguments, RestInput, RestOutput>
    {
        private IController _ExecutionContext;
        /// <summary>
        /// Gets all the steps to execute during the process.
        /// </summary>
        public IList<IStep> Steps { get; private set; } = new List<IStep>();

        /// <summary>
        /// Gets the loader arguments specified when loading the process.
        /// </summary>
        public RestProcessLoaderArguments LoaderArguments { get; private set; }

        /// <summary>
        /// Gets the translation to apply when starting the process.
        /// </summary>
        public ITranslation InputTranslation { get; private set; }

        /// <summary>
        /// Gets the translation to apply when ending the process.
        /// </summary>
        public ITranslation OutputTranslation { get; private set; }

        /// <summary>
        /// Gets the view to load for the output of the process.
        /// </summary>
        public string OutputView { get; private set; }

        /// <summary>
        /// Gets the data to load for the output of the process.
        /// </summary>
        public string OutputData { get; private set; }

        /// <summary>
        /// Gets the resulting data from the process.
        /// </summary>
        public ResponseBase Output { get; private set; }

        /// <summary>
        /// Initializes the process with the specified loader arguments.
        /// </summary>
        /// <param name="executionContext">The current execution context of the process</param>
        /// <param name="loaderArgs">The loader arguments to use for initializing the process.</param>
        /// <exception cref="ArgumentNullException">Thrown when the loaderArgs parameter is null</exception>
        public void Load(IController executionContext, RestProcessLoaderArguments loaderArgs)
        {
            if (loaderArgs == null)
                throw new ArgumentNullException("loaderArgs");

            _ExecutionContext = executionContext;
            LoaderArguments = loaderArgs;
            // Load the steps defined in the definition
            var stepElements = from step in LoaderArguments.Configuration.Elements()
                               where step.Name != "InputTranslation" && step.Name != "OutputTranslation" && step.Name != "RenderView" && step.Name != "RenderData"
                               select step;
            foreach (var step in stepElements)
                Steps.Add(Routing.Steps.Factory.Build(LoaderArguments.AbsolutePath, LoaderArguments.RelativePath, step, _ExecutionContext));

            var inputTranslationElement = LoaderArguments.Configuration.XPathSelectElement("./InputTranslation");
            if (inputTranslationElement != null)
                InputTranslation = Translators.Factory.Build(LoaderArguments.AbsolutePath, LoaderArguments.RelativePath, inputTranslationElement);
            var outputTranslationElement = LoaderArguments.Configuration.XPathSelectElement("./OutputTranslation");
            if (outputTranslationElement != null)
                OutputTranslation = Translators.Factory.Build(LoaderArguments.AbsolutePath, LoaderArguments.RelativePath, outputTranslationElement);
            var outputViewElement = LoaderArguments.Configuration.XPathSelectElement("./RenderView");
            if (outputViewElement != null && outputViewElement.Attribute("view") != null)
                OutputView = outputViewElement.Attribute("view").Value.Replace("{RelativePath}", LoaderArguments.RelativePath);
            var outputDataElement = LoaderArguments.Configuration.XPathSelectElement("./RenderData");
            if (outputDataElement != null && outputDataElement.Attribute("dataKey") != null)
                OutputData = outputDataElement.Attribute("dataKey").Value;
        }

        /// <summary>
        /// Executes the process using the supplied input parameters.
        /// </summary>
        /// <param name="input">The input parameters to use for the process</param>
        /// <returns>The output generated by the process</returns>
        public RestOutput Execute(RestInput input)
        {
            var fieldCache = new GenericFieldCache();
            var output = new RestOutput();
            fieldCache.AddRange(input.FieldCache);
            if (InputTranslation != null)
            {
                try
                {
                    GenericFieldCache translated = (GenericFieldCache)InputTranslation.Translate(new StringFieldCache(input.InputStream));
                    fieldCache.AddRange(translated);
                }
                catch (ParserException ex)
                {
                    output.Exceptions.Add(ex);
                }
            }
            if (output.Exceptions.Count == 0)
                // Execute each step and assign the field cache according to what the step returns
                foreach (IStep step in Steps)
                    try
                    {
                        fieldCache = step.Execute(fieldCache);
                    }
                    catch (ArgumentNullException ex)
                    {
                        output.Exceptions.Add(ex);
                        break;
                    }
                    catch (ArgumentException ex)
                    {
                        output.Exceptions.Add(ex);
                        break;
                    }
                    catch (ParserException ex)
                    {
                        output.Exceptions.Add(ex);
                        break;
                    }
                    catch (RegexValidationException ex)
                    {
                        foreach (RegexValidationException fieldEx in ex.ValidationExceptions)
                            output.Exceptions.Add(fieldEx);
                        break;
                    }

            if (!string.IsNullOrEmpty(OutputView))
            {
                output.SetData(fieldCache, fieldCache);
                Output = new ViewModelResponse<object>((Handler)_ExecutionContext, LoaderArguments.FactoryArgs.ModuleName, OutputView, output);
                var properties = ((ViewModelResponse<object>)Output).Properties;
                if (properties != null && properties.Count > 0)
                    fieldCache.AddRange(properties);
            }
            if (output.Success)
            {
                var translatedCache = OutputTranslation != null ? OutputTranslation.Translate(fieldCache) : fieldCache;
                output.SetData((!string.IsNullOrEmpty(OutputData) ? translatedCache[OutputData] : translatedCache), fieldCache);
            }
            if (string.IsNullOrEmpty(OutputView))
                Output = new InfoResponse<object>(
                    output.Success ? output.Data : output.Errors,
                    output.Success ? null : "One or more errors occurred during the execution of the controller. Please interrogate the Data property for further information.",
                    output.Success);
            return output;
        }
    }
}
